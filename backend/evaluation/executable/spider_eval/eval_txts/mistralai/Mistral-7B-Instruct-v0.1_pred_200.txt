 SELECT Title FROM Cartoon ORDER BY Title ASC;
  SELECT Title FROM Cartoon ORDER BY Title ASC;
  SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
  SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
  SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
  SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
  SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
  SELECT COUNT(*) AS Count, TV_Channel.country FROM TV_Channel GROUP BY TV_Channel.country ORDER BY Count DESC LIMIT ;
  SELECT COUNT(*) AS ChannelCount, TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY ChannelCount DESC LIMIT ;
  SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT content) AS num_contents FROM TV_Channel;
  SELECT DISTINCT TV_Channel.series_name, TV_Channel.Content FROM TV_Channel;
  SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT Content FROM TV_Channel WHERE id = '';
  SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
  SELECT TV_Channel.Package_Option FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title LIKE '%Sky Radio%';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
  SELECT LANGUAGE, COUNT(*) AS COUNT FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT ASC LIMIT ;
  SELECT MIN(Language) AS Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT ;
  SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language;
  SELECT Language, COUNT(*) AS ChannelCount FROM TV_Channel GROUP BY Language;
  SELECT TV_Channel.series_name FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
  SELECT TV_Channel.series_name FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
  SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
  SELECT "Episode" FROM "TV_series" ORDER BY "Rating" DESC;
  SELECT "Episode" FROM "TV_series" ORDER BY "Rating" DESC;
  SELECT TOP  "Episode", "Rating" FROM "TV_series" ORDER BY "Rating" DESC;
  SELECT "Episode", "Rating" FROM "TV_series" ORDER BY "Rating" DESC LIMIT ;
  SELECT MIN(Share), MAX(Share) FROM TV_series;
  SELECT MIN(Share), MAX(Share) FROM TV_series;
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Channel, Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
  SELECT Channel FROM Cartoon WHERE Title = 'A Love of a Lifetime';
  SELECT TV_Channel.series_name FROM TV_series INNER JOIN Cartoon ON TV_series.Channel = Cartoon.Channel WHERE TV_series.Episode = 'A Love of a Lifetime';
  SELECT TV_series.series_name  FROM TV_series  INNER JOIN Cartoon ON TV_series.Channel = Cartoon.Channel  WHERE Cartoon.Title = 'A Love of a Lifetime';
  SELECT "Episode" FROM "TV_series" WHERE "Channel" = '';
  SELECT "Episode" FROM "TV_series" WHERE "Channel" = '' AND "series_name" = 'Sky Radio';
  SELECT DISTINCT "Directed_by" FROM "Cartoon" GROUP BY "Directed_by" ;
  SELECT DISTINCT "Directed_by" FROM "Cartoon" GROUP BY "Directed_by" ;
  SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT ;
  SELECT TOP  Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT ;
  SELECT Channel, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'yes';
  SELECT TV_Channel.Package_Option, TV_series.series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel INNER JOIN TV_series ON Cartoon.Channel = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 'yes';
  SELECT TV_Channel.country FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT DISTINCT TV_Channel.country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey' GROUP BY TV_Channel.country HAVING COUNT(*) = ;
  SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
  SELECT TV_Channel.series_name, TV_Channel.country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY TV_Channel.id;
  SELECT TV_Channel.series_name, TV_Channel.country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
  SELECT TV_Channel.id, TV_Channel.series_name, TV_Channel.country, TV_Channel.language, TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.hight_definition_TV, TV_Channel.pay_per_view_PPV, TV_Channel.package_option FROM TV_Channel WHERE TV_Channel.language <> 'English';
  SELECT TV_Channel.pixel_aspect_ratio_PAR, TV_Channel.country FROM TV_Channel WHERE TV_Channel.language <> 'English';
  SELECT DISTINCT Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.Country IN (     SELECT DISTINCT Country FROM TV_Channel     GROUP BY Country     HAVING COUNT(*) >  )
  SELECT DISTINCT Channel FROM Cartoon GROUP BY Channel HAVING COUNT(*) > ;
  SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by <> 'Ben Jones';
  SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by <> 'Ben Jones';
  SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by <> 'Ben Jones';
  SELECT TV_Channel.Package_Option FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by <> 'Ben Jones';
  SELECT COUNT(*) FROM Pets WHERE weight > ;
  SELECT COUNT(*) FROM Pets WHERE weight > ;
  SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';
  SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';
  SELECT Pets.PetType, MAX(Pets.weight) AS MaxWeight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;
  SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
  SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > ;
  SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > ;
  SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = 'F' AND Has_Pet.PetType = 'dog';
  SELECT COUNT(*) FROM Has_Pet  INNER JOIN Student ON Has_Pet.StuID = Student.StuID  WHERE Student.Sex = 'F'  AND Has_Pet.PetType = 'dog';
  SELECT DISTINCT PetType FROM Pets;
  SELECT DISTINCT PetType FROM Pets;
  SELECT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
  SELECT s.Fname FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog')
  SELECT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.PetType = 'dog';
  SELECT s.Fname FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.PetType = 'dog';
  SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat';
  SELECT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat';
  SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' GROUP BY StuID HAVING COUNT(*) = ;
  SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' GROUP BY StuID HAVING COUNT(*) = ;
  SELECT s.Fname, s.Age FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND NOT EXISTS (     SELECT      FROM Has_Pet hp     INNER JOIN Pets p ON hp.PetID = p.PetID     WHERE hp.StuID = s.StuID     AND p.PetType = 'cat' )
  SELECT s.Fname FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND NOT EXISTS (     SELECT      FROM Has_Pet hp     INNER JOIN Pets p ON hp.PetID = p.PetID     WHERE hp.StuID = s.StuID     AND p.PetType = 'cat' ) ORDER BY s.Fname;
  SELECT Pets.PetType, Pets.weight FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID ORDER BY Pets.pet_age ASC LIMIT ;
  SELECT Pets.PetType, Pets.weight FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID ORDER BY Pets.pet_age ASC LIMIT ;
  SELECT PetID, weight FROM Pets WHERE pet_age > ;
  SELECT PetID, weight FROM Pets WHERE pet_age > ;
  SELECT Pets.PetType, AVG(Student.Age) AS AverageAge, MAX(Student.Age) AS MaxAge FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Pets.PetType;
  SELECT Pets.PetType, AVG(Student.Age) AS AverageAge, MAX(Student.Age) AS MaxAge FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Pets.PetType;
  SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
  SELECT Pets.PetType, AVG(Pets.weight) AS AverageWeight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;
  SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID;
  SELECT DISTINCT Student.Fname, Student.Age FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID;
  SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
  SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
  SELECT s.StuID, COUNT(*) AS PetCount FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID GROUP BY s.StuID;
  SELECT StuID, COUNT(PetID) AS PetCount FROM Has_Pet GROUP BY StuID;
  SELECT Student.Fname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(DISTINCT Has_Pet.PetID) > ;
  SELECT s.Fname, s.Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > ;
  SELECT LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age =  AND Pets.PetType = 'cat';
  SELECT LName FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.pet_age =  AND Pets.PetType = 'cat';
  SELECT AVG(Student.Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IS NULL;
  SELECT AVG(Student.Age) FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IS NULL;
  SELECT COUNT(*) FROM teacher;
  SELECT COUNT(*) FROM teacher;
  SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
  SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
  SELECT teacher.Age, teacher.Hometown FROM teacher;
  SELECT teacher.Age, teacher.Hometown FROM teacher;
  SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
  SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
  SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Grade IN (, );
  SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Grade IN (, );
  SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT ;
  SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT ;
  SELECT teacher.Hometown, COUNT(*) AS Count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown;
  SELECT DISTINCT teacher.Hometown, COUNT(*) AS Count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Hometown;
  SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT ;
  SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT ;
  SELECT teacher.Hometown FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course.Course) >= ;
  SELECT DISTINCT teacher.Hometown FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Hometown HAVING COUNT(DISTINCT course_arrange.Teacher_ID) >= ;
  SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID;
  SELECT teacher.Name, course.Course FROM course INNER JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID INNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID;
  SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC;
  SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC;
  SELECT Name FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  WHERE course_arrange.Course = 'Math';
  SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'Math';
  SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Number_of_Courses FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
  SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Courses_Taught FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY teacher.Name;
  SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= ;
  SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(*) >= ;
  SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
  SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
  SELECT COUNT(*) FROM Documents;
  SELECT COUNT(*) FROM Documents;
  SELECT Document_ID, Document_Name, Document_Description FROM Documents;
  SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
  SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
  SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
  SELECT DISTINCT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
  SELECT COUNT(DISTINCT Template_ID) FROM Documents;
  SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
  SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
  SELECT Templates.Template_ID, COUNT(*) AS Number_of_Documents FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
  SELECT DISTINCT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID;
  SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT ;
  SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT ;
  SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(*) > ;
  SELECT DISTINCT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(*) > ;
  SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )
  SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )
  SELECT COUNT(*) FROM Templates;
  SELECT COUNT(*) FROM Templates;
  SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
  SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
  SELECT DISTINCT Template_Type_Code FROM Templates;
  SELECT DISTINCT Template_Type_Code FROM Templates;
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
  SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > ;
  SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > ;
  SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;
  SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code;
  SELECT Template_Type_Code, COUNT(*) AS Count FROM Templates GROUP BY Template_Type_Code ORDER BY Count DESC LIMIT ;
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT ;
  SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < ;
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates     GROUP BY Template_Type_Code     HAVING COUNT(*) <  )
  SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
  SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
  SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';
  SELECT Template_Type_Code FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID INNER JOIN Templates ON Paragraphs.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';
  SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
  SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS Number_of_Documents FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS Document_Count FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
  SELECT Template_Type_Code, COUNT(*) AS Count FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code ORDER BY Count DESC LIMIT ;
  SELECT Template_Type_Code FROM (     SELECT Template_Type_Code, COUNT(*) AS Count     FROM Documents     JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID     JOIN Templates ON Documents.Template_ID = Templates.Template_ID     GROUP BY Template_Type_Code     ORDER BY Count DESC     LIMIT  ) AS Template_Type_Counts;
  SELECT Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
  SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates     GROUP BY Template_Type_Code     HAVING COUNT(*) =  )
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
  SELECT Template_Type_Code FROM Templates WHERE Template_Type_Description = 'Book';
  SELECT Template_Type_Code FROM Templates WHERE Template_Type_Description = 'Book';
  SELECT DISTINCT Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
  SELECT DISTINCT Templates.Template_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID;
  SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP';
  SELECT Template_ID FROM Templates WHERE Template_Description = 'Presentation';
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(*) FROM Paragraphs;
  SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
  SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
  SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
  SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';

