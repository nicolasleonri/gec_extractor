SELECT "Title" FROM "Cartoon" ORDER BY "Title" ASC;
 SELECT "Title" FROM "Cartoon" ORDER BY "Title" ASC;
 SELECT * FROM Cartoon WHERE "Directed_by" = 'Ben Jones';
 SELECT "Title" FROM Cartoon WHERE "Directed_by" = 'Ben Jones';
 SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
 SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
 SELECT c.Title, c.Directed_by FROM Cartoon c ORDER BY c.Original_air_date;
 SELECT "Title", "Directed_by" FROM Cartoon ORDER BY "Original_air_date";
 SELECT "Title" FROM "Cartoon" WHERE "Directed_by" IN ('Ben Jones', 'Brandon Vietti');
 SELECT "Title" FROM "Cartoon" WHERE "Directed_by" IN ('Ben Jones', 'Brandon Vietti');
 SELECT "Country", COUNT(id) FROM "TV_Channel" GROUP BY "Country" ORDER BY COUNT(id) DESC LIMIT ;
 SELECT Country, COUNT(id) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT ;
 SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
 SELECT COUNT(DISTINCT series_name) AS different_series, COUNT(DISTINCT Content) AS different_contents FROM TV_Channel;
 SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
 SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
 SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
 SELECT "Language", COUNT(*) AS num_channels FROM "TV_Channel" GROUP BY "Language" ORDER BY num_channels LIMIT ;
 SELECT "Language", COUNT(*) AS num_channels FROM "TV_Channel" GROUP BY "Language" ORDER BY num_channels LIMIT ;
 SELECT "Language", COUNT(*) FROM "TV_Channel" GROUP BY "Language";
 SELECT "Language", COUNT(id) FROM "TV_Channel" GROUP BY "Language";
 SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!');
 SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!');
 SELECT "Title" FROM "Cartoon" WHERE "Channel" IN (SELECT id FROM "TV_Channel" WHERE series_name = 'Sky Radio');
 SELECT "Title" FROM "Cartoon" WHERE "Channel" IN (SELECT id FROM "TV_Channel" WHERE series_name = 'Sky Radio');
 SELECT Episode FROM TV_series ORDER BY Rating DESC;
 SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC;
 SELECT "Episode", "Rating" FROM "TV_series" ORDER BY "Rating" DESC LIMIT ;
 SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT ;
 SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series;
 SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
 SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
 SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime';
 SELECT series_name FROM TV_Channel WHERE id = (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime');
 SELECT ts.Episode FROM TV_series ts JOIN TV_Channel tc ON ts.Channel = tc.id WHERE tc.series_name = 'Sky Radio';
 SELECT ts.Episode FROM TV_series ts JOIN TV_Channel tc ON ts.Channel = tc.id WHERE tc.series_name = 'Sky Radio';
 SELECT "Directed_by", COUNT(*) AS num_cartoons FROM Cartoon GROUP BY "Directed_by";
 SELECT "Directed_by", COUNT(*) AS num_cartoons FROM Cartoon GROUP BY "Directed_by";
 SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
 SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
 SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
 SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
 SELECT DISTINCT t.Country FROM TV_Channel t JOIN Cartoon c ON t.id = c.Channel WHERE c.Written_by = 'Todd Casey';
 SELECT DISTINCT tvc.Country FROM Cartoon c JOIN TV_Channel tvc ON c.Channel = tvc.id WHERE c.Written_by = 'Todd Casey';
 SELECT DISTINCT "Country" FROM "TV_Channel" WHERE id NOT IN (SELECT "Channel" FROM "Cartoon" WHERE "Written_by" = 'Todd Casey');
 SELECT DISTINCT "Country" FROM "TV_Channel" WHERE id NOT IN (SELECT "Channel" FROM "Cartoon" WHERE "Written_by" = 'Todd Casey');
 SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang'));
 SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang'));
 SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
 SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
 SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > );
 SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(id) > ;
 SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE "Directed_by" = 'Ben Jones');
 SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
 SELECT COUNT(*) FROM Pets WHERE weight > ;
 SELECT COUNT(*) FROM Pets WHERE weight > ;
 SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
 SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
 SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
 SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;
 SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > );
 SELECT COUNT(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > );
 SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F';
 SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F';
 SELECT COUNT(DISTINCT PetType) FROM Pets;
 SELECT COUNT(DISTINCT PetType) FROM Pets;
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));
 SELECT s.Major, s.Age FROM Student s WHERE s.StuID NOT IN (SELECT h.StuID FROM Has_Pet h JOIN Pets p ON h.PetID = p.PetID WHERE p.PetType = 'cat');
 SELECT s.Major, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat';
 SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
 SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
 SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
 SELECT PetID, weight FROM Pets WHERE pet_age > ;
 SELECT PetID, weight FROM Pets WHERE pet_age > ;
 SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaximumAge FROM Pets GROUP BY PetType;
 SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaximumAge FROM Pets GROUP BY PetType;
 SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
 SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
 SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
 SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
 SELECT hp.PetID FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith';
 SELECT hp.PetID FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.LName = 'Smith';
 SELECT s.StuID, COUNT(h.PetID) AS num_pets FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.StuID;
 SELECT StuID, COUNT(PetID) AS Num_Pets FROM Has_Pet GROUP BY StuID;
 SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > );
 SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > );
 SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType='cat' AND pet_age=));
 SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = ));
 SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
 SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
 SELECT COUNT(*) FROM teacher;
 SELECT COUNT(*) FROM teacher;
 SELECT Name FROM teacher ORDER BY CAST(Age AS INTEGER) ASC;
 SELECT Name FROM teacher ORDER BY CAST(Age AS INTEGER) ASC;
 SELECT "Age", "Hometown" FROM teacher;
 SELECT "Age", "Hometown" FROM teacher;
 SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
 SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
 SELECT Name FROM teacher WHERE Age IN ('', '');
 SELECT Name FROM teacher WHERE Age IN ('', '');
 SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
 SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
 SELECT "Hometown", COUNT(*) AS "Number of Teachers" FROM teacher GROUP BY "Hometown";
 SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
 SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT ;
 SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT ;
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) > ;
 SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= ;
 SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
 SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
 SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
 SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
 SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
 SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';
 SELECT t.Name, COUNT(ca.Course_ID) FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
 SELECT t.Name, COUNT(ca.Course_ID) AS Courses_Taught FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
 SELECT t.Name FROM teacher t WHERE t.Teacher_ID IN (SELECT ca.Teacher_ID FROM course_arrange ca GROUP BY ca.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= );
 SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= ;
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
 SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
 SELECT COUNT(*) FROM Documents;
 SELECT COUNT(*) FROM Documents;
 SELECT Document_ID, Document_Name, Document_Description FROM Documents;
 SELECT Document_ID, Document_Name, Document_Description FROM Documents;
 SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
 SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
 SELECT d.Document_ID, d.Template_ID, d.Document_Description FROM Documents d WHERE d.Document_Name = 'Robbin CV';
 SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
 SELECT COUNT(DISTINCT d.Template_ID) FROM Documents d;
 SELECT COUNT(DISTINCT d.Template_ID) FROM Documents d;
 SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');
 SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT');
 SELECT t.Template_ID, COUNT(d.Document_ID) AS Num_Documents FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;
 SELECT Template_ID, COUNT(*) AS Count_Of_Usage FROM Documents GROUP BY Template_ID;
 SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (SELECT TOP  Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC);
 SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(Document_ID) DESC LIMIT );
 SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > ;
 SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > ;
 SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
 SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
 SELECT COUNT(*) FROM Templates;
 SELECT COUNT(*) FROM Templates;
 SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
 SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
 SELECT DISTINCT Template_Type_Code FROM Templates;
 SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
 SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
 SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
 SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
 SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
 SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > ;
 SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > ;
 SELECT TTC.Template_Type_Code, COUNT(T.Template_ID) AS Num_Templates FROM Templates T INNER JOIN Ref_Template_Types TTC ON T.Template_Type_Code = TTC.Template_Type_Code GROUP BY TTC.Template_Type_Code;
 SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT ;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT ;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < ;
 SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < ;
 SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
 SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
 SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Understanding DB';
 SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Understanding DB';
 SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
 SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK');
 SELECT t.Template_Type_Code, COUNT(d.Template_ID) AS Num_Documents FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code;
 SELECT TTC.Template_Type_Code, COUNT(D.Template_ID) AS Count_Of_Documents FROM Templates T INNER JOIN Documents D ON T.Template_ID = D.Template_ID INNER JOIN Ref_Template_Types TTC ON T.Template_Type_Code = TTC.Template_Type_Code GROUP BY TTC.Template_Type_Code;
 SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents) GROUP BY Template_Type_Code ORDER BY COUNT(DISTINCT Document_ID) DESC LIMIT ;
 SELECT TOP  t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(d.Template_ID) DESC;
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
 SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
 SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
 SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
 SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
 SELECT DISTINCT RTTT.Template_Type_Description FROM Ref_Template_Types RTTT JOIN Templates T ON RTTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID;
 SELECT DISTINCT Template_Type_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
 SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
 SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'Presentation';
 SELECT COUNT(*) FROM Paragraphs;
 SELECT COUNT(*) FROM Paragraphs;
 SELECT COUNT(*) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
 SELECT COUNT(*) FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
 SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
 SELECT d.Document_ID, d.Document_Name, d.Document_Description, p.Paragraph_Text, p.Other_Details  FROM Documents d  JOIN Paragraphs p ON d.Document_ID = p.Document_ID  WHERE p.Paragraph_Text LIKE '%Korea%';

