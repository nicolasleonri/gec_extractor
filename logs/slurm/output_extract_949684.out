Loading modules...
Setting folders...
Activating virtual environment...
Running vllm...
INFO 08-25 18:59:13 [__init__.py:241] Automatically detected platform cuda.
INFO 08-25 18:59:16 [utils.py:326] non-default args: {'model': 'unsloth/phi-4-unsloth-bnb-4bit', 'disable_log_stats': True}
INFO 08-25 18:59:28 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-25 18:59:28 [__init__.py:1750] Using max model len 16384
WARNING 08-25 18:59:29 [__init__.py:1171] bitsandbytes quantization is not fully optimized yet. The speed can be slower than non-quantized models.
INFO 08-25 18:59:30 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:31 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:31 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='unsloth/phi-4-unsloth-bnb-4bit', speculative_config=None, tokenizer='unsloth/phi-4-unsloth-bnb-4bit', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=16384, download_dir=None, load_format=bitsandbytes, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=bitsandbytes, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=unsloth/phi-4-unsloth-bnb-4bit, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:36 [parallel_state.py:1134] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:36 [topk_topp_sampler.py:50] Using FlashInfer for top-p & top-k sampling.
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:36 [gpu_model_runner.py:1953] Starting to load model unsloth/phi-4-unsloth-bnb-4bit...
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:36 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:39 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:39 [bitsandbytes_loader.py:742] Loading weights with BitsAndBytes quantization. May take a while ...
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:39 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:00<00:00,  6.06it/s]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:00<00:00, 11.53it/s]
[1;36m(EngineCore_0 pid=188851)[0;0m 
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:05<00:10,  5.27s/it]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:09<00:04,  4.92s/it]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:10<00:00,  3.11s/it]
[1;36m(EngineCore_0 pid=188851)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:10<00:00,  3.63s/it]
[1;36m(EngineCore_0 pid=188851)[0;0m 
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 18:59:52 [gpu_model_runner.py:2007] Model loading took 10.2817 GiB and 15.486147 seconds
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:00:03 [backends.py:548] Using cache directory: /lustre/romanistik/leonnial/.cache/vllm/torch_compile_cache/befa5c7fb1/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:00:03 [backends.py:559] Dynamo bytecode transform time: 10.46 s
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:00:29 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:00:56 [backends.py:215] Compiling a graph for dynamic shape takes 52.87 s
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:01:07 [monitor.py:34] torch.compile takes 63.34 s in total
[1;36m(EngineCore_0 pid=188851)[0;0m /lustre/romanistik/leonnial/gec_extractor/venv/extract_pipeline/lib/python3.11/site-packages/torch/utils/cpp_extension.py:2356: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
[1;36m(EngineCore_0 pid=188851)[0;0m If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
[1;36m(EngineCore_0 pid=188851)[0;0m   warnings.warn(
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:02:03 [gpu_worker.py:276] Available KV cache memory: 70.99 GiB
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:02:03 [kv_cache_utils.py:849] GPU KV cache size: 372,160 tokens
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:02:03 [kv_cache_utils.py:853] Maximum concurrency for 16,384 tokens per request: 22.71x
[1;36m(EngineCore_0 pid=188851)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   1%|▏         | 1/67 [00:00<00:18,  3.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:12,  5.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:09,  6.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:08,  7.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   7%|▋         | 5/67 [00:00<00:08,  7.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:07,  7.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:00<00:07,  8.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:01<00:07,  8.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:01<00:07,  8.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:01<00:06,  8.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:03<00:44,  1.27it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:04<00:48,  1.13it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  19%|█▉        | 13/67 [00:05<00:44,  1.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:21<04:53,  5.55s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:22<03:23,  3.92s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:22<02:21,  2.77s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:22<01:38,  1.98s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:22<01:09,  1.42s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:22<00:49,  1.03s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:22<00:35,  1.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:22<00:25,  1.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:22<00:19,  2.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:22<00:14,  2.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:23<00:11,  3.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  37%|███▋      | 25/67 [00:23<00:10,  3.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:23<00:08,  4.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:23<00:07,  5.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:23<00:06,  6.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  43%|████▎     | 29/67 [00:23<00:05,  6.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:23<00:05,  7.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:24<00:04,  7.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:24<00:04,  7.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:24<00:04,  7.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:24<00:04,  8.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:24<00:03,  8.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:24<00:03,  8.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  55%|█████▌    | 37/67 [00:24<00:03,  8.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:24<00:03,  8.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:39<02:05,  4.47s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:39<01:25,  3.17s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:39<00:58,  2.25s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:39<00:40,  1.61s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  64%|██████▍   | 43/67 [00:39<00:27,  1.16s/it]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:40<00:19,  1.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:40<00:13,  1.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:40<00:09,  2.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:40<00:07,  2.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:40<00:05,  3.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:40<00:04,  4.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:40<00:03,  4.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:40<00:02,  5.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:40<00:02,  6.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:41<00:02,  6.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:41<00:01,  7.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:41<00:01,  7.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:41<00:01,  7.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:41<00:01,  8.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:41<00:01,  8.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:41<00:00,  8.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:41<00:00,  8.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:42<00:00,  8.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:42<00:00,  8.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:42<00:00,  8.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:42<00:00,  8.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:42<00:00,  8.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:42<00:00,  9.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:42<00:00,  8.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:42<00:00,  1.57it/s]
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:02:46 [gpu_model_runner.py:2708] Graph capturing finished in 43 secs, took 1.47 GiB
[1;36m(EngineCore_0 pid=188851)[0;0m INFO 08-25 19:02:46 [core.py:214] init engine (profile, create kv cache, warmup model) took 174.19 seconds
INFO 08-25 19:02:47 [llm.py:298] Supported_tasks: ['generate']
Adding requests:   0%|          | 0/4 [00:00<?, ?it/s]Adding requests: 100%|██████████| 4/4 [00:00<00:00, 167.44it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:  25%|██▌       | 1/4 [00:01<00:05,  1.99s/it, est. speed input: 2.52 toks/s, output: 8.05 toks/s]Processed prompts: 100%|██████████| 4/4 [00:02<00:00,  1.99s/it, est. speed input: 10.65 toks/s, output: 30.98 toks/s]Processed prompts: 100%|██████████| 4/4 [00:02<00:00,  1.94it/s, est. speed input: 10.65 toks/s, output: 30.98 toks/s]
Time taken: 2.0966904163360596 seconds

Generated Outputs:
------------------------------------------------------------
Prompt:    'Hello, my name is'
Output:    ' John. I am a data scientist and I use Python for my work. Python'
------------------------------------------------------------
Prompt:    'The president of the United States is'
Output:    ' elected through a process known as the Electoral College system. Each state is allocated a'
------------------------------------------------------------
Prompt:    'The capital of France is'
Output:    ' Paris." is written in the active voice. The subject of the sentence is "'
------------------------------------------------------------
Prompt:    'The future of AI is'
Output:    ' bright, with ongoing research pushing the boundaries of what these systems can achieve. As'
------------------------------------------------------------
Script finished!
