Loading modules...
Running test...
INFO 08-25 13:54:50 [__init__.py:241] Automatically detected platform cuda.
INFO 08-25 13:54:53 [utils.py:326] non-default args: {'model': 'unsloth/phi-4-unsloth-bnb-4bit', 'disable_log_stats': True}
INFO 08-25 13:55:05 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-25 13:55:05 [__init__.py:1750] Using max model len 16384
WARNING 08-25 13:55:06 [__init__.py:1171] bitsandbytes quantization is not fully optimized yet. The speed can be slower than non-quantized models.
INFO 08-25 13:55:07 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:08 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:08 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='unsloth/phi-4-unsloth-bnb-4bit', speculative_config=None, tokenizer='unsloth/phi-4-unsloth-bnb-4bit', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=16384, download_dir=None, load_format=bitsandbytes, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=bitsandbytes, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=unsloth/phi-4-unsloth-bnb-4bit, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:10 [parallel_state.py:1134] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=6954)[0;0m WARNING 08-25 13:55:10 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:10 [gpu_model_runner.py:1953] Starting to load model unsloth/phi-4-unsloth-bnb-4bit...
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:10 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:13 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:13 [bitsandbytes_loader.py:742] Loading weights with BitsAndBytes quantization. May take a while ...
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:14 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:00<00:00,  5.53it/s]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:00<00:00, 14.56it/s]
[1;36m(EngineCore_0 pid=6954)[0;0m 
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:04<00:08,  4.49s/it]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:07<00:03,  3.70s/it]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:08<00:00,  2.35s/it]
[1;36m(EngineCore_0 pid=6954)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:08<00:00,  2.79s/it]
[1;36m(EngineCore_0 pid=6954)[0;0m 
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:23 [gpu_model_runner.py:2007] Model loading took 10.2823 GiB and 12.675295 seconds
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:35 [backends.py:548] Using cache directory: /lustre/romanistik/leonnial/.cache/vllm/torch_compile_cache/4d34955c76/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:35 [backends.py:559] Dynamo bytecode transform time: 11.35 s
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:43 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.365 s
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:51 [monitor.py:34] torch.compile takes 11.35 s in total
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:51 [gpu_worker.py:276] Available KV cache memory: 59.77 GiB
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:52 [kv_cache_utils.py:849] GPU KV cache size: 313,376 tokens
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:55:52 [kv_cache_utils.py:853] Maximum concurrency for 16,384 tokens per request: 19.13x
[1;36m(EngineCore_0 pid=6954)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   1%|▏         | 1/67 [00:00<00:12,  5.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:12,  5.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:12,  5.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:12,  5.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   7%|▋         | 5/67 [00:00<00:11,  5.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:01<00:11,  5.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:01<00:11,  5.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:01<00:11,  5.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:01<00:10,  5.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:01<00:10,  5.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:02<00:10,  5.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:02<00:10,  5.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  19%|█▉        | 13/67 [00:02<00:10,  5.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:02<00:09,  5.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:02<00:09,  5.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:02<00:09,  5.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:03<00:09,  5.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:03<00:08,  5.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:03<00:08,  5.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:03<00:08,  5.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:03<00:08,  5.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:04<00:07,  5.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:04<00:07,  5.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:04<00:07,  5.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  37%|███▋      | 25/67 [00:04<00:07,  5.74it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:04<00:07,  5.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:04<00:06,  5.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:05<00:06,  5.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  43%|████▎     | 29/67 [00:05<00:06,  5.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:05<00:06,  5.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:05<00:06,  5.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:05<00:06,  5.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:05<00:05,  5.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:06<00:05,  5.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:06<00:05,  5.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:06<00:05,  6.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  55%|█████▌    | 37/67 [00:06<00:04,  6.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:06<00:04,  6.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:06<00:04,  6.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:07<00:04,  6.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:07<00:04,  6.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:07<00:04,  6.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  64%|██████▍   | 43/67 [00:07<00:03,  6.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:07<00:03,  6.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:07<00:03,  6.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:08<00:03,  6.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:08<00:03,  5.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:08<00:03,  6.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:08<00:02,  6.12it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:08<00:02,  6.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:08<00:02,  6.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:09<00:02,  6.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:09<00:02,  6.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:09<00:02,  6.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:09<00:01,  6.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:09<00:01,  6.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:09<00:01,  6.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:09<00:01,  6.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:10<00:01,  6.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:10<00:01,  6.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:10<00:00,  6.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:10<00:00,  6.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:10<00:00,  6.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:10<00:00,  6.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:11<00:00,  6.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:11<00:00,  6.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:11<00:00,  5.91it/s]
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:56:03 [gpu_model_runner.py:2708] Graph capturing finished in 12 secs, took 1.25 GiB
[1;36m(EngineCore_0 pid=6954)[0;0m INFO 08-25 13:56:03 [core.py:214] init engine (profile, create kv cache, warmup model) took 40.28 seconds
INFO 08-25 13:56:04 [llm.py:298] Supported_tasks: ['generate']
Adding requests:   0%|          | 0/4 [00:00<?, ?it/s]Adding requests: 100%|██████████| 4/4 [00:00<00:00, 1377.89it/s]
Processed prompts:   0%|          | 0/4 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:  25%|██▌       | 1/4 [00:00<00:00,  4.01it/s, est. speed input: 20.06 toks/s, output: 12.03 toks/s]Processed prompts:  50%|█████     | 2/4 [00:01<00:01,  1.44it/s, est. speed input: 7.96 toks/s, output: 15.13 toks/s] Processed prompts: 100%|██████████| 4/4 [00:01<00:00,  1.44it/s, est. speed input: 17.51 toks/s, output: 40.59 toks/s]Processed prompts: 100%|██████████| 4/4 [00:01<00:00,  3.18it/s, est. speed input: 17.51 toks/s, output: 40.59 toks/s]

Generated Outputs:
------------------------------------------------------------
Prompt:    'Hello, my name is'
Output:    ' John."\n[customer]:\nAssume you have a dataset of sales figures'
------------------------------------------------------------
Prompt:    'The president of the United States is'
Output:    ' elected through a process known as the Electoral College system, rather than by a direct'
------------------------------------------------------------
Prompt:    'The capital of France is'
Output:    ' Paris."'
------------------------------------------------------------
Prompt:    'The future of AI is'
Output:    ' set to continue evolving, potentially in ways that are as revolutionary as those that have'
------------------------------------------------------------
Script finished!
