Loading modules...
Setting folders...
Activating virtual environment...
Running llama...
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: NVIDIA H100 NVL, compute capability 9.0, VMM: yes
llama_model_load_from_file_impl: using device CUDA0 (NVIDIA H100 NVL) - 94811 MiB free
llama_model_loader: loaded meta data with 37 key-value pairs and 434 tensors from /lustre/romanistik/leonnial/.cache/huggingface/hub/models--unsloth--Nanonets-OCR-s-GGUF/snapshots/e1970a8d538c03d5bfd7ca05bdb1a87864a0a4fc/./Nanonets-OCR-s-Q4_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = qwen2vl
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Nanonets-Ocr-S
llama_model_loader: - kv   3:                           general.basename str              = Nanonets-Ocr-S
llama_model_loader: - kv   4:                       general.quantized_by str              = Unsloth
llama_model_loader: - kv   5:                         general.size_label str              = 3.1B
llama_model_loader: - kv   6:                           general.repo_url str              = https://huggingface.co/unsloth
llama_model_loader: - kv   7:                   general.base_model.count u32              = 1
llama_model_loader: - kv   8:                  general.base_model.0.name str              = Nanonets OCR S
llama_model_loader: - kv   9:          general.base_model.0.organization str              = Nanonets
llama_model_loader: - kv  10:              general.base_model.0.repo_url str              = https://huggingface.co/nanonets/Nanon...
llama_model_loader: - kv  11:                               general.tags arr[str,4]       = ["OCR", "unsloth", "pdf2markdown", "i...
llama_model_loader: - kv  12:                          general.languages arr[str,1]       = ["en"]
llama_model_loader: - kv  13:                        qwen2vl.block_count u32              = 36
llama_model_loader: - kv  14:                     qwen2vl.context_length u32              = 128000
llama_model_loader: - kv  15:                   qwen2vl.embedding_length u32              = 2048
llama_model_loader: - kv  16:                qwen2vl.feed_forward_length u32              = 11008
llama_model_loader: - kv  17:               qwen2vl.attention.head_count u32              = 16
llama_model_loader: - kv  18:            qwen2vl.attention.head_count_kv u32              = 2
llama_model_loader: - kv  19:                     qwen2vl.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  20:   qwen2vl.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  21:            qwen2vl.rope.dimension_sections arr[i32,4]       = [16, 24, 24, 0]
llama_model_loader: - kv  22:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  23:                         tokenizer.ggml.pre str              = qwen2
llama_model_loader: - kv  24:                      tokenizer.ggml.tokens arr[str,151936]  = ["!", "\"", "#", "$", "%", "&", "'", ...
llama_model_loader: - kv  25:                  tokenizer.ggml.token_type arr[i32,151936]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  26:                      tokenizer.ggml.merges arr[str,151387]  = ["Ġ Ġ", "ĠĠ ĠĠ", "i n", "Ġ t",...
llama_model_loader: - kv  27:                tokenizer.ggml.eos_token_id u32              = 151645
llama_model_loader: - kv  28:            tokenizer.ggml.padding_token_id u32              = 151654
llama_model_loader: - kv  29:               tokenizer.ggml.add_bos_token bool             = false
llama_model_loader: - kv  30:                    tokenizer.chat_template str              = {#- Copyright 2025-present the Unslot...
llama_model_loader: - kv  31:               general.quantization_version u32              = 2
llama_model_loader: - kv  32:                          general.file_type u32              = 15
llama_model_loader: - kv  33:                      quantize.imatrix.file str              = Nanonets-OCR-s-GGUF/imatrix_unsloth.dat
llama_model_loader: - kv  34:                   quantize.imatrix.dataset str              = unsloth_calibration_Nanonets-OCR-s.txt
llama_model_loader: - kv  35:             quantize.imatrix.entries_count u32              = 252
llama_model_loader: - kv  36:              quantize.imatrix.chunks_count u32              = 691
llama_model_loader: - type  f32:  181 tensors
llama_model_loader: - type q4_K:  216 tensors
llama_model_loader: - type q6_K:   37 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 1.79 GiB (4.99 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token: 151660 '<|fim_middle|>' is not marked as EOG
load: control token: 151659 '<|fim_prefix|>' is not marked as EOG
load: control token: 151653 '<|vision_end|>' is not marked as EOG
load: control token: 151648 '<|box_start|>' is not marked as EOG
load: control token: 151646 '<|object_ref_start|>' is not marked as EOG
load: control token: 151649 '<|box_end|>' is not marked as EOG
load: control token: 151655 '<|image_pad|>' is not marked as EOG
load: control token: 151651 '<|quad_end|>' is not marked as EOG
load: control token: 151647 '<|object_ref_end|>' is not marked as EOG
load: control token: 151652 '<|vision_start|>' is not marked as EOG
load: control token: 151654 '<|vision_pad|>' is not marked as EOG
load: control token: 151656 '<|video_pad|>' is not marked as EOG
load: control token: 151644 '<|im_start|>' is not marked as EOG
load: control token: 151661 '<|fim_suffix|>' is not marked as EOG
load: control token: 151650 '<|quad_start|>' is not marked as EOG
load: printing all EOG tokens:
load:   - 151643 ('<|endoftext|>')
load:   - 151645 ('<|im_end|>')
load:   - 151662 ('<|fim_pad|>')
load:   - 151663 ('<|repo_name|>')
load:   - 151664 ('<|file_sep|>')
load: special tokens cache size = 22
load: token to piece cache size = 0.9310 MB
print_info: arch             = qwen2vl
print_info: vocab_only       = 0
print_info: n_ctx_train      = 128000
print_info: n_embd           = 2048
print_info: n_layer          = 36
print_info: n_head           = 16
print_info: n_head_kv        = 2
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 8
print_info: n_embd_k_gqa     = 256
print_info: n_embd_v_gqa     = 256
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-06
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 11008
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = -1
print_info: rope type        = 8
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 128000
print_info: rope_finetuned   = unknown
print_info: model type       = 3B
print_info: model params     = 3.09 B
print_info: general.name     = Nanonets-Ocr-S
print_info: vocab type       = BPE
print_info: n_vocab          = 151936
print_info: n_merges         = 151387
print_info: BOS token        = 11 ','
print_info: EOS token        = 151645 '<|im_end|>'
print_info: EOT token        = 151645 '<|im_end|>'
print_info: PAD token        = 151654 '<|vision_pad|>'
print_info: LF token         = 198 'Ċ'
print_info: FIM PRE token    = 151659 '<|fim_prefix|>'
print_info: FIM SUF token    = 151661 '<|fim_suffix|>'
print_info: FIM MID token    = 151660 '<|fim_middle|>'
print_info: FIM PAD token    = 151662 '<|fim_pad|>'
print_info: FIM REP token    = 151663 '<|repo_name|>'
print_info: FIM SEP token    = 151664 '<|file_sep|>'
print_info: EOG token        = 151643 '<|endoftext|>'
print_info: EOG token        = 151645 '<|im_end|>'
print_info: EOG token        = 151662 '<|fim_pad|>'
print_info: EOG token        = 151663 '<|repo_name|>'
print_info: EOG token        = 151664 '<|file_sep|>'
print_info: max token length = 256
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CUDA0, is_swa = 0
load_tensors: layer   1 assigned to device CUDA0, is_swa = 0
load_tensors: layer   2 assigned to device CUDA0, is_swa = 0
load_tensors: layer   3 assigned to device CUDA0, is_swa = 0
load_tensors: layer   4 assigned to device CUDA0, is_swa = 0
load_tensors: layer   5 assigned to device CUDA0, is_swa = 0
load_tensors: layer   6 assigned to device CUDA0, is_swa = 0
load_tensors: layer   7 assigned to device CUDA0, is_swa = 0
load_tensors: layer   8 assigned to device CUDA0, is_swa = 0
load_tensors: layer   9 assigned to device CUDA0, is_swa = 0
load_tensors: layer  10 assigned to device CUDA0, is_swa = 0
load_tensors: layer  11 assigned to device CUDA0, is_swa = 0
load_tensors: layer  12 assigned to device CUDA0, is_swa = 0
load_tensors: layer  13 assigned to device CUDA0, is_swa = 0
load_tensors: layer  14 assigned to device CUDA0, is_swa = 0
load_tensors: layer  15 assigned to device CUDA0, is_swa = 0
load_tensors: layer  16 assigned to device CUDA0, is_swa = 0
load_tensors: layer  17 assigned to device CUDA0, is_swa = 0
load_tensors: layer  18 assigned to device CUDA0, is_swa = 0
load_tensors: layer  19 assigned to device CUDA0, is_swa = 0
load_tensors: layer  20 assigned to device CUDA0, is_swa = 0
load_tensors: layer  21 assigned to device CUDA0, is_swa = 0
load_tensors: layer  22 assigned to device CUDA0, is_swa = 0
load_tensors: layer  23 assigned to device CUDA0, is_swa = 0
load_tensors: layer  24 assigned to device CUDA0, is_swa = 0
load_tensors: layer  25 assigned to device CUDA0, is_swa = 0
load_tensors: layer  26 assigned to device CUDA0, is_swa = 0
load_tensors: layer  27 assigned to device CUDA0, is_swa = 0
load_tensors: layer  28 assigned to device CUDA0, is_swa = 0
load_tensors: layer  29 assigned to device CUDA0, is_swa = 0
load_tensors: layer  30 assigned to device CUDA0, is_swa = 0
load_tensors: layer  31 assigned to device CUDA0, is_swa = 0
load_tensors: layer  32 assigned to device CUDA0, is_swa = 0
load_tensors: layer  33 assigned to device CUDA0, is_swa = 0
load_tensors: layer  34 assigned to device CUDA0, is_swa = 0
load_tensors: layer  35 assigned to device CUDA0, is_swa = 0
load_tensors: layer  36 assigned to device CUDA0, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q6_K) (and 0 others) cannot be used with preferred buffer type CUDA_Host, using CPU instead
load_tensors: offloading 36 repeating layers to GPU
load_tensors: offloading output layer to GPU
load_tensors: offloaded 37/37 layers to GPU
load_tensors:   CPU_Mapped model buffer size =   243.43 MiB
load_tensors:        CUDA0 model buffer size =  1834.83 MiB
...............................................................................
llama_context: constructing llama_context
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 8192
llama_context: n_ctx_per_seq = 8192
llama_context: n_batch       = 512
llama_context: n_ubatch      = 512
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (8192) < n_ctx_train (128000) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:  CUDA_Host  output buffer size =     0.58 MiB
create_memory: n_ctx = 8192 (padded)
llama_kv_cache_unified: layer   0: dev = CUDA0
llama_kv_cache_unified: layer   1: dev = CUDA0
llama_kv_cache_unified: layer   2: dev = CUDA0
llama_kv_cache_unified: layer   3: dev = CUDA0
llama_kv_cache_unified: layer   4: dev = CUDA0
llama_kv_cache_unified: layer   5: dev = CUDA0
llama_kv_cache_unified: layer   6: dev = CUDA0
llama_kv_cache_unified: layer   7: dev = CUDA0
llama_kv_cache_unified: layer   8: dev = CUDA0
llama_kv_cache_unified: layer   9: dev = CUDA0
llama_kv_cache_unified: layer  10: dev = CUDA0
llama_kv_cache_unified: layer  11: dev = CUDA0
llama_kv_cache_unified: layer  12: dev = CUDA0
llama_kv_cache_unified: layer  13: dev = CUDA0
llama_kv_cache_unified: layer  14: dev = CUDA0
llama_kv_cache_unified: layer  15: dev = CUDA0
llama_kv_cache_unified: layer  16: dev = CUDA0
llama_kv_cache_unified: layer  17: dev = CUDA0
llama_kv_cache_unified: layer  18: dev = CUDA0
llama_kv_cache_unified: layer  19: dev = CUDA0
llama_kv_cache_unified: layer  20: dev = CUDA0
llama_kv_cache_unified: layer  21: dev = CUDA0
llama_kv_cache_unified: layer  22: dev = CUDA0
llama_kv_cache_unified: layer  23: dev = CUDA0
llama_kv_cache_unified: layer  24: dev = CUDA0
llama_kv_cache_unified: layer  25: dev = CUDA0
llama_kv_cache_unified: layer  26: dev = CUDA0
llama_kv_cache_unified: layer  27: dev = CUDA0
llama_kv_cache_unified: layer  28: dev = CUDA0
llama_kv_cache_unified: layer  29: dev = CUDA0
llama_kv_cache_unified: layer  30: dev = CUDA0
llama_kv_cache_unified: layer  31: dev = CUDA0
llama_kv_cache_unified: layer  32: dev = CUDA0
llama_kv_cache_unified: layer  33: dev = CUDA0
llama_kv_cache_unified: layer  34: dev = CUDA0
llama_kv_cache_unified: layer  35: dev = CUDA0
llama_kv_cache_unified:      CUDA0 KV buffer size =   288.00 MiB
llama_kv_cache_unified: size =  288.00 MiB (  8192 cells,  36 layers,  1/1 seqs), K (f16):  144.00 MiB, V (f16):  144.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 2
llama_context: max_nodes = 3480
llama_context: worst-case: n_tokens = 512, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =  512, n_seqs =  1, n_outputs =  512
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =  512, n_seqs =  1, n_outputs =  512
llama_context:      CUDA0 compute buffer size =   300.75 MiB
llama_context:  CUDA_Host compute buffer size =    21.02 MiB
llama_context: graph nodes  = 1374
llama_context: graph splits = 2
CUDA : ARCHS = 520 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'quantize.imatrix.chunks_count': '691', 'quantize.imatrix.entries_count': '252', 'general.repo_url': 'https://huggingface.co/unsloth', 'qwen2vl.context_length': '128000', 'qwen2vl.rope.freq_base': '1000000.000000', 'tokenizer.ggml.padding_token_id': '151654', 'qwen2vl.block_count': '36', 'general.base_model.0.repo_url': 'https://huggingface.co/nanonets/Nanonets-OCR-s', 'general.type': 'model', 'general.quantized_by': 'Unsloth', 'general.basename': 'Nanonets-Ocr-S', 'qwen2vl.attention.layer_norm_rms_epsilon': '0.000001', 'general.name': 'Nanonets-Ocr-S', 'tokenizer.ggml.pre': 'qwen2', 'general.base_model.count': '1', 'general.base_model.0.organization': 'Nanonets', 'qwen2vl.embedding_length': '2048', 'general.size_label': '3.1B', 'tokenizer.ggml.add_bos_token': 'false', 'general.architecture': 'qwen2vl', 'qwen2vl.feed_forward_length': '11008', 'quantize.imatrix.file': 'Nanonets-OCR-s-GGUF/imatrix_unsloth.dat', 'qwen2vl.attention.head_count': '16', 'qwen2vl.attention.head_count_kv': '2', 'tokenizer.ggml.model': 'gpt2', 'general.quantization_version': '2', 'tokenizer.ggml.eos_token_id': '151645', 'tokenizer.chat_template': '{#- Copyright 2025-present the Unsloth team. All rights reserved. #}\n{#- Licensed under the Apache License, Version 2.0 (the "License") #}\n{%- set image_count = namespace(value=0) -%}\n{%- set video_count = namespace(value=0) -%}\n{%- set text_count  = namespace(value=0) -%}\n{%- for message in messages -%}\n\t{%- if loop.first and message["role"] != "system" -%}\n\t\t{{- "<|im_start|>system\\nYou are a helpful assistant.<|im_end|>\\n" -}}\n\t{%- endif -%}\n\t{{- "<|im_start|>" -}}\n\t{{- message["role"] -}}\n\t{{- "\\n" -}}\n\t{%- if message["content"] is string -%}\n\t\t{{- message["content"] -}}\n\t\t{{- "<|im_end|>\\n" -}}\n\t{%- else -%}\n\t\t{#- Check if text field is present #}\n\t\t{%- set text_count.value = 0 -%}\n\t\t{%- for content in message["content"] -%}\n\t\t\t{%- if content["type"] == "image" or "image" in content or "image_url" in content -%}\n\t\t\t\t{%- set image_count.value = image_count.value + 1 -%}\n\t\t\t\t{%- if add_vision_id -%}\n\t\t\t\t\t{{- "Picture " -}}\n\t\t\t\t\t{{- image_count.value -}}\n\t\t\t\t\t{{- ": " -}}\n\t\t\t\t{%- endif -%}\n\t\t\t\t{{- "<|vision_start|><|image_pad|><|vision_end|>" -}}\n\t\t\t{%- elif content["type"] == "video" or "video" in content -%}\n\t\t\t\t{%- set video_count.value = video_count.value + 1 -%}\n\t\t\t\t{%- if add_vision_id -%}\n\t\t\t\t\t{{- "Video " -}}\n\t\t\t\t\t{{- video_count.value -}}\n\t\t\t\t\t{{- ": " -}}\n\t\t\t\t{%- endif -%}\n\t\t\t\t{{- "<|vision_start|><|video_pad|><|vision_end|>" -}}\n\t\t\t{%- elif "text" in content -%}\n\t\t\t\t{{- content["text"]|string -}}\n\t\t\t\t{%- if content["text"]|length != 0 -%}\n\t\t\t\t\t{%- set text_count.value = text_count.value + 1 -%}\n\t\t\t\t{%- endif -%}\n\t\t\t{%- endif -%}\n\t\t{%- endfor -%}\n\t\t{#- If text field seen, add a newline #}\n\t\t{%- if text_count.value != 0 -%}\n\t\t\t{{- "\\n" -}}\n\t\t{%- endif -%}\n\t\t{{- "Extract the text from the above document as if you were reading it naturally. Return the tables in html format. Return the equations in LaTeX representation. If there is an image in the document and image caption is not present, add a small description of the image inside the <img></img> tag; otherwise, add the image caption inside <img></img>. Watermarks should be wrapped in brackets. Ex: <watermark>OFFICIAL COPY</watermark>. Page numbers should be wrapped in brackets. Ex: <page_number>14</page_number> or <page_number>9/22</page_number>. Prefer using ☐ and ☑ for check boxes." -}}\n\t\t{{- "<|im_end|>\\n" -}}\n\t{%- endif -%}\n{%- endfor -%}\n{%- if add_generation_prompt -%}\n\t{{- "<|im_start|>assistant\\n" -}}\n{%- endif -%}\n{#- Copyright 2025-present the Unsloth team. All rights reserved. #}\n{#- Licensed under the Apache License, Version 2.0 (the "License") #}', 'general.file_type': '15', 'general.base_model.0.name': 'Nanonets OCR S', 'quantize.imatrix.dataset': 'unsloth_calibration_Nanonets-OCR-s.txt'}
Available chat formats from metadata: chat_template.default
Minimal - Cleared state, processing 1 images
clip_model_loader: model name:   Nanonets-Ocr-S
clip_model_loader: description:  
clip_model_loader: GGUF version: 3
clip_model_loader: alignment:    32
clip_model_loader: n_tensors:    519
clip_model_loader: n_kv:         29

clip_model_loader: has vision encoder
clip_ctx: CLIP using CUDA0 backend
load_hparams: projector:          qwen2.5vl_merger
load_hparams: n_embd:             1280
load_hparams: n_head:             16
load_hparams: n_ff:               3420
load_hparams: n_layer:            32
load_hparams: ffn_op:             silu
load_hparams: projection_dim:     2048

--- vision hparams ---
load_hparams: image_size:         1024
load_hparams: patch_size:         14
load_hparams: has_llava_proj:     0
load_hparams: minicpmv_version:   0
load_hparams: proj_scale_factor:  0
load_hparams: n_wa_pattern:       8

load_hparams: model size:         1276.39 MiB
load_hparams: metadata size:      0.18 MiB
